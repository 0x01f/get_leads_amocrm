import { IResourceEntity, IResourceFactory } from "../../../interfaces/api";
import { TConstructor, TEntityConstructor } from "../../../types";
import { IHasCreateFactory } from "../../factories/mixins/hasCreate";
export interface IHasEmbedded<E> {
    _embedded?: E;
    getEmbedded(): E;
    setEmbedded(patch: E): void;
}
export declare type IHasEmbeddedEntity<T extends IResourceFactory<IResourceEntity<T>>, E> = IResourceEntity<T> & IHasEmbedded<E>;
export declare function hasEmbedded<T extends IHasCreateFactory<IResourceEntity<T>>, E>(Base: TEntityConstructor<T>): TConstructor<IResourceEntity<T>>;
