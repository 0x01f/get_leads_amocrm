import { IResourceEntity, IResourceFactory } from "../../../interfaces/api";
import { TConstructor, TEntityConstructor } from "../../../types";
import { IHasTasksFactory } from "../../factories/mixins/hasTasks";
import { IEntityList } from "../common/EntityList";
import { ITask } from "../Task";
import { IFactoryCriteriaItem } from "../../factories/common/FactoryCriteriaBuilder";
export interface IHasTasks<T extends IHasTasksFactory<IResourceEntity<T>>> {
    tasks: IEntityList<ITask>;
    Task: TConstructor<ITask>;
}
export declare class TaskEntityCriteriaItem<T extends IResourceFactory<IResourceEntity<T>>> implements IFactoryCriteriaItem {
    readonly entity: IResourceEntity<T>;
    constructor(entity: IResourceEntity<T>);
    fetchCriteria(): {
        filter: {
            entity_id: number | undefined;
        };
    };
    createCriteria(): {
        entity_id: number | undefined;
    };
}
export declare function hasTasks<T extends IHasTasksFactory<IResourceEntity<T>>>(Base: TEntityConstructor<T>): TConstructor<IResourceEntity<T>>;
