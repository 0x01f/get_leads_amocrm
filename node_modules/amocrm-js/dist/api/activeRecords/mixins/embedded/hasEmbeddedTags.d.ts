import { IEmbedded, IResourceEntity, IResourceFactory } from "../../../../interfaces/api";
import { TConstructor } from "../../../../types";
import { IEmbeddedTag } from "../../Tag";
import { IHasSaveEntity } from "../hasSave";
import { IEmbeddedEntityList, IQueryAttributes } from "../../common/EmbeddedEntityList";
import { IHasEmbedded } from "../hasEmbedded";
export interface IHasEmbeddedTagsEntity<T extends IResourceFactory<IResourceEntity<T>>> extends IResourceEntity<T> {
    embeddedTags: IEmbeddedEntityList<IEmbeddedTag>;
}
export interface IHasEmbeddedTagsOptions {
    attributes?: IQueryAttributes<IEmbeddedTag>;
}
export declare type IRequiredEntity<T extends IResourceFactory<IHasSaveEntity<T>>> = IHasSaveEntity<T> & IHasEmbedded<IEmbedded<IEmbeddedTag>>;
export declare function hasEmbeddedTags(options?: IHasEmbeddedTagsOptions): <T extends IResourceFactory<IRequiredEntity<T>>>(Base: TConstructor<IRequiredEntity<T>>) => TConstructor<IResourceEntity<T>>;
