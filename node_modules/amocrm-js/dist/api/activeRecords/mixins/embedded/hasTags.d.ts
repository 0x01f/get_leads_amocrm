import { IResourceEntity, IResourceFactory } from "../../../../interfaces/api";
import { TConstructor, TEntityConstructor } from "../../../../types";
import { IEmbeddedTag } from "../../Tag";
export declare type ITagCriteria = IEmbeddedTag[];
export interface IHasEmbeddedTagsEntity<T extends IResourceFactory<IResourceEntity<T>>> extends IResourceEntity<T> {
    get(): IEmbeddedTag[];
    add(criteria: ITagCriteria): IResourceEntity<T>;
    remove(criteria: ITagCriteria): IResourceEntity<T>;
    tagList: IEntityTagList<T>;
}
export interface IEntityTagList<T extends IResourceFactory<IResourceEntity<T>>> {
    get(): IEmbeddedTag[];
    add(criteria: ITagCriteria): IResourceEntity<T>;
    remove(criteria: ITagCriteria): IResourceEntity<T>;
}
export declare function hasTags<T extends IResourceFactory<IResourceEntity<T>>>(Base: TEntityConstructor<T>): TConstructor<IResourceEntity<T>>;
