import { IEmbedded, IResourceEntity, IResourceFactory } from "../../../../interfaces/api";
import { TConstructor } from "../../../../types";
import { IEmbeddedTag } from "../../Tag";
import { IHasCreateAndUpdateEntity, IHasSave } from "../hasSave";
import { IEntityCriteriaItem } from "../../common/EntityCriteriaBuilder";
import { IHasEmbedded } from "../hasEmbedded";
export declare type IRequiredEntity<T extends IResourceFactory<IHasCreateAndUpdateEntity<T>>> = IResourceEntity<T> & IHasSave<T> & IHasEmbedded<IEmbedded<IEmbeddedTag>>;
export declare function hasEmbeddedSource<T extends IResourceFactory<IRequiredEntity<T>>>(Base: TConstructor<IRequiredEntity<T>>): TConstructor<IResourceEntity<T>>;
export declare class EmbeddedSourceCriteriaItem<T extends IResourceFactory<IRequiredEntity<T>>> implements IEntityCriteriaItem {
    protected entity: IRequiredEntity<T>;
    constructor(entity: IRequiredEntity<T>);
    get createCriteria(): object;
    get updateCriteria(): object;
}
