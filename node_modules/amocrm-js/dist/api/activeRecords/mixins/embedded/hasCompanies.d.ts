import { IResourceEntity, IResourceFactory } from "../../../../interfaces/api";
import { TConstructor, TEntityConstructor } from "../../../../types";
import { IEmbeddedCompany } from "../../Company";
export declare type IContactCriteria = (IEmbeddedCompany)[];
export interface IHasEmbeddedCompaniesEntity<T extends IResourceFactory<IResourceEntity<T>>> extends IResourceEntity<T> {
    getContacts(): IEmbeddedCompany[];
    addContacts(criteria: IContactCriteria): IResourceEntity<T>;
    removeContacts(criteria: IContactCriteria): IResourceEntity<T>;
    companyList: IEntityCompanyList<T>;
}
export interface IEntityCompanyList<T extends IResourceFactory<IResourceEntity<T>>> {
    get(): IEmbeddedCompany[];
    add(criteria: IContactCriteria): IResourceEntity<T>;
    remove(criteria: IContactCriteria): IResourceEntity<T>;
}
export declare function hasContacts<T extends IResourceFactory<IResourceEntity<T>>>(Base: TEntityConstructor<T>): TConstructor<IResourceEntity<T>>;
