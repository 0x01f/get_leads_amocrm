import { IResourceEntity, IResourceFactory } from "../../../../interfaces/api";
import { TConstructor, TEntityConstructor } from "../../../../types";
import { IEmbeddedCatalogElement } from "../../CatalogElement";
export declare type IElementCriteria = (IEmbeddedCatalogElement)[];
export interface IHasEmbeddedElementsEntity<T extends IResourceFactory<IResourceEntity<T>>> extends IResourceEntity<T> {
    getElements(): IEmbeddedCatalogElement[];
    addElements(criteria: IElementCriteria): IResourceEntity<T>;
    removeElements(criteria: IElementCriteria): IResourceEntity<T>;
    catalogElementList: IEntitycatalogElementList<T>;
}
export interface IEntitycatalogElementList<T extends IResourceFactory<IResourceEntity<T>>> {
    get(): IEmbeddedCatalogElement[];
    add(criteria: IElementCriteria): IResourceEntity<T>;
    remove(criteria: IElementCriteria): IResourceEntity<T>;
}
export declare function hasElements<T extends IResourceFactory<IResourceEntity<T>>>(Base: TEntityConstructor<T>): TConstructor<IResourceEntity<T>>;
