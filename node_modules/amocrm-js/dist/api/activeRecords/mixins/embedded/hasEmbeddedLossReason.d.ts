import { IEmbedded, IResourceEntity, IResourceFactory } from "../../../../interfaces/api";
import { TConstructor } from "../../../../types";
import { IHasCreateAndUpdateEntity, IHasSave } from "../hasSave";
import { IEmbeddedEntityList, IQueryAttributes } from "../../common/EmbeddedEntityList";
import { IEmbeddedLossReason } from "../../LossReason";
import { IHasEmbedded } from "../hasEmbedded";
export interface IHasEmbeddedLossReasonsEntity<T extends IResourceFactory<IResourceEntity<T>>> extends IResourceEntity<T> {
    lossReasons: IEmbeddedEntityList<IEmbeddedLossReason>;
}
export interface IHasEmbeddedLossReasonsOptions {
    attributes?: IQueryAttributes<IEmbeddedLossReason>;
}
export declare type IRequiredEntity<T extends IResourceFactory<IHasCreateAndUpdateEntity<T>>> = IResourceEntity<T> & IHasSave<T> & IHasEmbedded<IEmbedded<IEmbeddedLossReason>>;
export declare function hasEmbeddedLossReasons(options?: IHasEmbeddedLossReasonsOptions): <T extends IResourceFactory<IRequiredEntity<T>>>(Base: TConstructor<IRequiredEntity<T>>) => TConstructor<IResourceEntity<T>>;
