import { IResourceEntity, IResourceFactory } from "../../../../interfaces/api";
import { TConstructor, TEntityConstructor } from "../../../../types";
import { IEmbeddedContact } from "../../Contact";
export declare type IContactCriteria = (IEmbeddedContact)[];
export interface IHasEmbeddedContactsEntity<T extends IResourceFactory<IResourceEntity<T>>> extends IResourceEntity<T> {
    getContacts(): IEmbeddedContact[];
    addContacts(criteria: IContactCriteria): IResourceEntity<T>;
    removeContacts(criteria: IContactCriteria): IResourceEntity<T>;
    contactList: IEntityContactList<T>;
}
export interface IEntityContactList<T extends IResourceFactory<IResourceEntity<T>>> {
    get(): IEmbeddedContact[];
    add(criteria: IContactCriteria): IResourceEntity<T>;
    remove(criteria: IContactCriteria): IResourceEntity<T>;
}
export declare function hasContacts<T extends IResourceFactory<IResourceEntity<T>>>(Base: TEntityConstructor<T>): TConstructor<IResourceEntity<T>>;
