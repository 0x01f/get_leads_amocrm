import { IResourceEntity, IResourceFactory } from "../../../interfaces/api";
import { TConstructor, TEntityConstructor } from "../../../types";
import { ObjectKey } from "../../../interfaces/common";
import { IFactoryConstructors } from "../../factories";
import { ILinkedEntity } from "../common/LinkedEntity";
import { IHasGetByIdFactory } from "../../factories/mixins/hasGetById";
export interface IHasLinked<T extends IResourceFactory<IResourceEntity<T>>, L extends IHasGetByIdFactory<IResourceEntity<L>>> {
    entity_id?: number;
    entity_type?: ObjectKey<IFactoryConstructors>;
    entity: ILinkedEntity<T, L>;
}
export declare type IHasLinkedEntity<T extends IResourceFactory<IResourceEntity<T>>, L extends IHasGetByIdFactory<IResourceEntity<L>>> = IResourceEntity<T> & IHasLinked<T, L>;
export declare function hasLinkedEntity<T extends IResourceFactory<IResourceEntity<T>>, L extends IHasGetByIdFactory<IResourceEntity<L>>>(Base: TEntityConstructor<T>): TConstructor<IResourceEntity<T>>;
