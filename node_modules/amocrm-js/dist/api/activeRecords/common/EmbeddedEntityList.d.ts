import { IEmbedded, IEmbeddedEntity, IResourceEntity, IResourceFactory } from "../../../interfaces/api";
import { ObjectKey } from "../../../interfaces/common";
import { IEntityCriteriaItem } from "./EntityCriteriaBuilder";
import { IHasEmbeddedEntity } from "../mixins/hasEmbedded";
export interface IEmbeddedEntityList<E extends IEmbeddedEntity> extends IEntityCriteriaItem {
    readonly embeddedType: ObjectKey<IEmbedded<E>>;
    length: number;
    add(criteria: E[]): void;
    set(value: E[] | null): void;
    get(): E[];
    remove(value?: E[]): void;
}
export declare type IHasTypedEmbeddedEntity<T extends IResourceFactory<IResourceEntity<T>>, E> = IHasEmbeddedEntity<T, IEmbedded<E>>;
export interface IQueryAttributes<E extends IEmbeddedEntity> {
    save?: ObjectKey<E>[];
    create?: ObjectKey<E>[];
    update?: ObjectKey<E>[];
}
export interface IEmbeddedEntityListOptions<T extends IResourceFactory<IResourceEntity<T>>, E extends IEmbeddedEntity> {
    entity: IHasTypedEmbeddedEntity<T, E>;
    embeddedType: ObjectKey<IEmbedded<E>>;
    attributes?: IQueryAttributes<E>;
}
export declare class EmbeddedEntityList<T extends IResourceFactory<IHasTypedEmbeddedEntity<T, E>>, E extends IEmbeddedEntity> implements IEmbeddedEntityList<E> {
    readonly embeddedType: ObjectKey<IEmbedded<E>>;
    protected entity: IHasTypedEmbeddedEntity<T, E>;
    protected attributes?: IQueryAttributes<E>;
    constructor(options: IEmbeddedEntityListOptions<T, E>);
    add(criteria: object[]): void;
    set(value: IEmbeddedEntity[] | null): void;
    get length(): number;
    get(): E[];
    remove(value?: IEmbeddedEntity[]): void;
    getEmbeddedSaveCriteria(attributes?: ObjectKey<E>[]): {
        _embedded?: undefined;
    } | {
        _embedded: {
            [x: string]: { [P in keyof E]?: E[P] | undefined; }[];
        };
    };
    protected pickItemAttributes(item: E, attributes?: ObjectKey<E>[]): { [P in keyof E]?: E[P] | undefined; };
    get createCriteria(): {
        _embedded?: undefined;
    } | {
        _embedded: {
            [x: string]: { [P in keyof E]?: E[P] | undefined; }[];
        };
    };
    get updateCriteria(): {
        _embedded?: undefined;
    } | {
        _embedded: {
            [x: string]: { [P in keyof E]?: E[P] | undefined; }[];
        };
    };
}
