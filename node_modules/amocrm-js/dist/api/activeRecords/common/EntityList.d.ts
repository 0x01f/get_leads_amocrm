import { IHasGetFactory } from "../../factories/mixins/hasGetByCriteria";
import { IResourceEntity, IResourceFactory } from "../../../interfaces/api";
import { IHasCreateFactory } from "../../factories/mixins/hasCreate";
export interface IEntityList<T extends IResourceEntity<IResourceFactory<T>>> {
    get: IHasGetFactory<T>['get'];
    create: IHasCreateFactory<T>['create'];
}
export declare type IEntityListRequiredFactory<T extends IResourceEntity<IResourceFactory<T>>> = IHasGetFactory<T> & IHasCreateFactory<T>;
export interface IEntityListOptions<T extends IResourceEntity<IResourceFactory<T>>> {
    factory: IEntityListRequiredFactory<T>;
}
export declare class EntityList<T extends IResourceEntity<IResourceFactory<T>>> implements IEntityList<T> {
    readonly get: IHasGetFactory<T>['get'];
    readonly create: IHasCreateFactory<T>['create'];
    constructor(options: IEntityListOptions<T>);
}
