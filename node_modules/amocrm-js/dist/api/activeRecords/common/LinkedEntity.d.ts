import { IRequestOptions } from "../../../interfaces/common";
import { IHasLinkedEntity } from "../mixins/hasLinkedEntity";
import { IHasGetByIdCriteria, IHasGetByIdFactory } from "../../factories/mixins/hasGetById";
import { IResourceEntity, IResourceFactory } from "../../../interfaces/api";
export interface ILinkedEntityOptions<T extends IResourceFactory<IResourceEntity<T>>, L extends IHasGetByIdFactory<IResourceEntity<L>>> {
    entity: IHasLinkedEntity<T, L>;
}
export interface ILinkedEntity<T extends IResourceFactory<IResourceEntity<T>>, L extends IHasGetByIdFactory<IResourceEntity<L>>> {
    get<TL extends IResourceEntity<IResourceFactory<TL>> = IResourceEntity<L>>(criteria?: IHasGetByIdCriteria, options?: IRequestOptions): Promise<TL | null>;
}
export declare class LinkedEntity<T extends IResourceFactory<IResourceEntity<T>>, L extends IHasGetByIdFactory<IResourceEntity<L>>> implements ILinkedEntity<T, L> {
    readonly entity: IHasLinkedEntity<T, L>;
    constructor(options: ILinkedEntityOptions<T, L>);
    get<TL extends IResourceEntity<IResourceFactory<TL>> = IResourceEntity<L>>(criteria?: IHasGetByIdCriteria, options?: IRequestOptions): Promise<TL | null>;
}
