import { IResourceEntity, IResourceFactory } from "../../../interfaces/api";
import { TFactoryConstructor } from "../../../types";
import { ITagFactory } from "../TagFactory";
import { IGetCriteria } from "./hasGetByCriteria";
export interface IGetTagsCriteria extends IGetCriteria {
    filter?: {
        name?: string;
        id?: number | number[];
    };
}
export interface IHasTags<T extends IResourceEntity<IResourceFactory<T>>> {
    tags: ITagFactory;
}
export declare type IHasTagsFactory<T extends IResourceEntity<IResourceFactory<T>>> = IResourceFactory<T> & IHasTags<T>;
export declare function hasTags<T extends IResourceEntity<IResourceFactory<T>>>(Base: TFactoryConstructor<T>): TFactoryConstructor<T>;
