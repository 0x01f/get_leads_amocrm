import { IResourceEntity, IResourceFactory, ITimestampRangeCriteria } from "../../../interfaces/api";
import { TFactoryConstructor } from "../../../types";
import { IRequestOptions, ObjectKey } from "../../../interfaces/common";
import { ITaskFactory, TaskCreateCriteria } from "../TaskFactory";
import { IGetCriteria } from "./hasGetByCriteria";
import { ITask } from "../../activeRecords/Task";
import { IResourcePagination } from "../../ResourcePagination";
import { IFactoryCriteriaItem } from "../common/FactoryCriteriaBuilder";
import { IFactoryConstructors } from "../index";
export interface IGetTasksCriteria extends IGetCriteria {
    filter?: {
        id?: number | number[];
        updated_at?: number | ITimestampRangeCriteria;
    };
}
export interface IFactoryTaskList {
    get(criteria?: IGetTasksCriteria, options?: IRequestOptions): Promise<IResourcePagination<ITask>>;
    create(criteria: (TaskCreateCriteria | ITask)[], options?: IRequestOptions): Promise<ITask[]>;
}
export interface IHasTasks<T extends IResourceEntity<IResourceFactory<T>>> extends IResourceFactory<T> {
    tasks: ITaskFactory;
}
export declare type IHasTasksFactory<T extends IResourceEntity<IResourceFactory<T>>> = IResourceFactory<T> & IHasTasks<T>;
export declare class HasTasksFactoryCriteriaItem implements IFactoryCriteriaItem {
    protected entityType: ObjectKey<IFactoryConstructors>;
    constructor(entityType: ObjectKey<IFactoryConstructors>);
    fetchCriteria(): {
        entity_type: keyof IFactoryConstructors;
    };
    createCriteria(): {
        entity_type: keyof IFactoryConstructors;
    };
    updateCriteria(): {
        entity_type: keyof IFactoryConstructors;
    };
}
export declare function hasTasks<T extends IResourceEntity<IResourceFactory<T>>>(Base: TFactoryConstructor<T>): TFactoryConstructor<T>;
